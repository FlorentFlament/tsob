#!/usr/bin/env python3

import numpy
import os

from sys import argv
from PIL import Image
from asmlib import *

# palette taken from 40years/tools/get_pfcolors.py
palette = {
    (0x00, 0x00, 0x00): 0x00,
    (0x28, 0x28, 0x28): 0x02,
    (0x50, 0x50, 0x50): 0x04,
    (0x74, 0x74, 0x74): 0x06,
    (0x94, 0x94, 0x94): 0x08,
    (0xb4, 0xb4, 0xb4): 0x0a,
    (0xd0, 0xd0, 0xd0): 0x0c,
    (0xec, 0xec, 0xec): 0x0e,

    (0x80, 0x50, 0x00): 0x20,
    (0x94, 0x70, 0x20): 0x22,
    (0xa8, 0x84, 0x3c): 0x24,
    (0xbc, 0x9c, 0x58): 0x26,
    (0xcc, 0xac, 0x70): 0x28,
    (0xdc, 0xc0, 0x84): 0x2a,
    (0xec, 0xd0, 0x9c): 0x2c,
    (0xfc, 0xe0, 0xb0): 0x2e,

    (0x44, 0x5c, 0x00): 0x30,
    (0x5c, 0x78, 0x20): 0x32,
    (0x74, 0x90, 0x3c): 0x34,
    (0x8c, 0xac, 0x48): 0x36,
    (0xa0, 0xc0, 0x70): 0x38,
    (0xb0, 0xd4, 0x84): 0x3a,
    (0xc4, 0xe8, 0x9c): 0x3c,
    (0xd4, 0xfc, 0xb0): 0x3e,

    (0x70, 0x34, 0x00): 0x40,
    (0x88, 0x50, 0x20): 0x42,
    (0xa0, 0x68, 0x3c): 0x44,
    (0xb4, 0x84, 0x58): 0x46,
    (0xc8, 0x98, 0x70): 0x48,
    (0xdc, 0xac, 0x84): 0x4a,
    (0xec, 0xc0, 0x9c): 0x4c,
    (0xfc, 0xd4, 0xb0): 0x4e,

    (0x00, 0x64, 0x14): 0x50,
    (0x20, 0x80, 0x34): 0x52,
    (0x3c, 0x98, 0x50): 0x54,
    (0x58, 0xb0, 0x6c): 0x56,
    (0x70, 0xc4, 0x84): 0x58,
    (0x84, 0xd8, 0x9c): 0x5a,
    (0x9c, 0xe8, 0xb4): 0x5c,
    (0xb0, 0xfc, 0xc8): 0x5e,

    (0x70, 0x00, 0x14): 0x60,
    (0x88, 0x20, 0x34): 0x62,
    (0xa0, 0x3c, 0x50): 0x64,
    (0xb4, 0x58, 0x6c): 0x66,
    (0xc8, 0x70, 0x84): 0x68,
    (0xdc, 0x84, 0x9c): 0x6a,
    (0xec, 0x9c, 0xb4): 0x6c,
    (0xfc, 0xb0, 0xc8): 0x6e,

    (0x00, 0x5c, 0x5c): 0x70,
    (0x20, 0x74, 0x74): 0x72,
    (0x3c, 0x8c, 0x8c): 0x74,
    (0x58, 0xa4, 0xa4): 0x76,
    (0x70, 0xb8, 0xb8): 0x78,
    (0x84, 0xc8, 0xc8): 0x7a,
    (0x9c, 0xdc, 0xdc): 0x7c,
    (0xb0, 0xec, 0xec): 0x7e,

    (0x70, 0x00, 0x5c): 0x80,
    (0x84, 0x20, 0x74): 0x82,
    (0x94, 0x3c, 0x88): 0x84,
    (0xa8, 0x58, 0x9c): 0x86,
    (0xb4, 0x70, 0xb0): 0x88,
    (0xc4, 0x84, 0xc0): 0x8a,
    (0xd0, 0x9c, 0xd0): 0x8c,
    (0xe0, 0xb0, 0xe0): 0x8e,

    (0x00, 0x3c, 0x70): 0x90,
    (0x1c, 0x58, 0x88): 0x92,
    (0x38, 0x74, 0xa0): 0x94,
    (0x50, 0x8c, 0xb4): 0x96,
    (0x68, 0xa4, 0xc8): 0x98,
    (0x7c, 0xb8, 0xdc): 0x9a,
    (0x90, 0xcc, 0xec): 0x9c,
    (0xa4, 0xe0, 0xfc): 0x9e,

    (0x58, 0x00, 0x70): 0xa0,
    (0x6c, 0x20, 0x88): 0xa2,
    (0x80, 0x3c, 0xa0): 0xa4,
    (0x94, 0x58, 0xb4): 0xa6,
    (0xa4, 0x70, 0xc8): 0xa8,
    (0xb4, 0x84, 0xdc): 0xaa,
    (0xc4, 0x9c, 0xec): 0xac,
    (0xd4, 0xb0, 0xfc): 0xae,

    (0x00, 0x20, 0x70): 0xb0,
    (0x1c, 0x3c, 0x88): 0xb2,
    (0x38, 0x58, 0xa0): 0xb4,
    (0x50, 0x74, 0xb4): 0xb6,
    (0x68, 0x88, 0xc8): 0xb8,
    (0x7c, 0xa0, 0xdc): 0xba,
    (0x90, 0xb4, 0xec): 0xbc,
    (0xa4, 0xc8, 0xfc): 0xbe,

    (0x3c, 0x00, 0x80): 0xc0,
    (0x54, 0x20, 0x94): 0xc2,
    (0x6c, 0x3c, 0xa8): 0xc4,
    (0x80, 0x58, 0xbc): 0xc6,
    (0x94, 0x70, 0xcc): 0xc8,
    (0xa8, 0x84, 0xdc): 0xca,
    (0xb8, 0x9c, 0xec): 0xcc,
    (0xc8, 0xb0, 0xfc): 0xce,

    (0x00, 0x00, 0x88): 0xd0,
    (0x20, 0x20, 0x9c): 0xd2,
    (0x3c, 0x3c, 0xb0): 0xd4,
    (0x58, 0x58, 0xc0): 0xd6,
    (0x70, 0x70, 0xd0): 0xd8,
    (0x84, 0x84, 0xe0): 0xda,
    (0x9c, 0x9c, 0xec): 0xdc,
    (0xb0, 0xb0, 0xfc): 0xde,
}

# taken from 40years/tools/get_pfcolors.py
def best_palette_match(col):
    m_key = None
    m_col = None
    m_nor = None
    for k in palette.keys():
        c = numpy.array(k) / 256.
        n = numpy.linalg.norm(c - col)
        if (m_nor is None or n < m_nor):
            m_key = k
            m_col = c
            m_nor = n
    # Debug stuff
    # print col, m_key, m_col, m_nor
    return palette[m_key]

def get_colors(line):
    cols = sorted(set(line))
    bg = cols[0]
    fg = cols[1] if len(cols)>1 else None
    return (bg, fg)

def get_playfields(bits):
    """
    bits is a list of pixels on one line, 1 bool per pixel.
    Code taken from m/tools/png2logo.py
    """
    b_pfs = []
    b_pfs.append(list(reversed(bits[0:4])) + 4*[False])
    b_pfs.append(bits[4:12])
    b_pfs.append(list(reversed(bits[12:20])))
    b_pfs.append(list(reversed(bits[20:24])) + 4*[False])
    b_pfs.append(bits[24:32])
    b_pfs.append(list(reversed(bits[32:40])))
    i_pfs = [lbool2int(p) for p in b_pfs]
    return i_pfs
    
def main():
    fname = argv[1]

    image = Image.open(fname)
    width, height = image.size

    if width != 40 or height != 40:
        print("Error: image size expected to be 40x40, but found {}x{}".format(width, height))
        exit(1)

    # Drop alpha channel
    data = [p[0:3] for p in image.getdata()]

    l_bg = []
    l_fg = []
    l_pfss = [[],[],[],[],[],[]]
    
    for i in range(40): # 40 lines
        ln = data[i*40 : (i+1)*40] # 40 pixels per line
        bg, fg = get_colors(ln)
        bits = [c == fg for c in ln]
        pfs = get_playfields(bits)
        vcs_bg = best_palette_match(bg)
        vcs_fg = best_palette_match(fg) if fg != None else 0x00

        l_bg.append(vcs_bg)
        l_fg.append(vcs_fg)
        for i in range(6):
            l_pfss[i].append(pfs[i])

    gfx_name, _ = os.path.splitext(os.path.basename(fname))
    gfx_name = gfx_name.replace('-','_')
    print("slideshow_{}_colbg:".format(gfx_name))
    print(lst2asm(reversed(l_bg)))
    print("")
    print("slideshow_{}_colpf:".format(gfx_name))
    print(lst2asm(reversed(l_fg)))
    for i,pfs in enumerate(l_pfss):
        print("")
        print("slideshow_{}_p{}:".format(gfx_name, i))
        print(lst2asm(reversed(pfs)))

main()
