------- FILE main.asm LEVEL 1 PASS 2
      1  10000 ????						;;;-----------------------------------------------------------------------------
      2  10000 ????						;;; Header
      3  10000 ????
      4  10000 ????				       PROCESSOR	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       INCLUDE	"vcs.h"	; Provides RIOT & TIA memory map
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE main.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      INCLUDE	"macro.h"	; This file includes some helper macros
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????
    163  0000 ????						; EOF
------- FILE main.asm
      7  0000 ????
      8  0000 ????
      9  0000 ????						;;;-----------------------------------------------------------------------------
     10  0000 ????						;;; RAM segment
     11  0000 ????
     12 U00b3 ????				      SEG.U	ram
     13 U0080					      ORG	$0080
     14 U0080		       00	   framecnt   DS.B	1
     15 U0081		       00	   seed       DS.B	1
     16 U0082		       00	   tmp	      DS.B	1
     17 U0083		       00 00 00 00*buffer     DS.B	5
     18 U0088		       00	   posintab   ds	1
     19 U0089		       00	   slowmotion ds	1
     20 U008a		       00	   iniflag    ds	1
     21 U008b							;ss_ptsintab	ds 2
     22 U008b							;ss_ptpictab	ds 12
     23 U008b		       00 00 00 00*ss_sin     ds	40
     24 U00b3
     25 U00b3
     26 U00b3							;;;-----------------------------------------------------------------------------
     27 U00b3							;;; Code segment
     28 U00b3
     29  f258 ????				      SEG	code
     30  f000					      ORG	$F000
      0  f000				   init       CLEAN_START		; Initializes Registers & Memory
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     32  f00b		       20 41 f0 	      jsr	fx_init
     33  f00e
     34  f00e				   main_loop
      0  f00e					      VERTICAL_SYNC		; 4 scanlines Vertical Sync signal
      1  f00e		       a9 0e		      lda	#%1110
      2  f010		       85 02	   .VSLP1     sta	WSYNC
      3  f012		       85 00		      sta	VSYNC
      4  f014		       4a		      lsr
      5  f015		       d0 f9		      bne	.VSLP1
     36  f017
     37  f017							; 34 VBlank lines (76 cycles/line)
     38  f017		       a9 27		      lda	#39	; (/ (* 34.0 76) 64) = 40.375
     39  f019		       8d 96 02 	      sta	TIM64T
     40  f01c		       20 5a f0 	      jsr	fx_vblank
     41  f01f		       20 3b f0 	      jsr	wait_timint
     42  f022
     43  f022							; 248 Kernel lines
     44  f022		       a9 13		      lda	#19	; (/ (* 248.0 76) 1024) = 18.40
     45  f024		       8d 97 02 	      sta	T1024T
     46  f027		       20 fb f0 	      jsr	fx_kernel	; scanline 33 - cycle 23
     47  f02a		       20 3b f0 	      jsr	wait_timint	; scanline 289 - cycle 30
     48  f02d
     49  f02d							; 26 Overscan lines
     50  f02d		       a9 16		      lda	#22	; (/ (* 26.0 76) 64) = 30.875
     51  f02f		       8d 96 02 	      sta	TIM64T
     52  f032		       20 3b f1 	      jsr	fx_overscan
     53  f035		       20 3b f0 	      jsr	wait_timint
     54  f038
     55  f038		       4c 0e f0 	      jmp	main_loop	; scanline 308 - cycle 15
     56  f03b
     57  f03b
     58  f03b							; X register must contain the number of scanlines to skip
     59  f03b							; X register will have value 0 on exit
     60  f03b				   wait_timint
     61  f03b		       ad 85 02 	      lda	TIMINT
     62  f03e		       f0 fb		      beq	wait_timint
     63  f040		       60		      rts
     64  f041
------- FILE fx.asm LEVEL 2 PASS 2
      0  f041					      INCLUDE	"fx.asm"
      1  f041				   fx_init
      2  f041		       a9 00		      lda	#0
      3  f043		       85 0d		      sta	PF0
      4  f045		       85 0e		      sta	PF1
      5  f047		       85 0f		      sta	PF2
      6  f049		       85 09		      sta	COLUBK
      7  f04b		       a9 ff		      lda	#$FF
      8  f04d		       85 08		      sta	COLUPF
      9  f04f
     10  f04f		       a2 27		      ldx	#39
     11  f051		       bd 30 f2    .load      lda	sintab,x
     12  f054		       95 8b		      sta	ss_sin,x
     13  f056		       ca		      dex
     14  f057		       d0 f8		      bne	.load
     15  f059		       60		      rts
     16  f05a				   fx_vblank
     17  f05a		       a5 8c		      lda	ss_sin+$1
     18  f05c		       85 88		      sta	posintab
     19  f05e		       a5 8d		      lda	ss_sin+$2
     20  f060		       85 8c		      sta	ss_sin+$1
     21  f062		       a5 8e		      lda	ss_sin+$3
     22  f064		       85 8d		      sta	ss_sin+$2
     23  f066		       a5 8f		      lda	ss_sin+$4
     24  f068		       85 8e		      sta	ss_sin+$3
     25  f06a		       a5 90		      lda	ss_sin+$5
     26  f06c		       85 8f		      sta	ss_sin+$4
     27  f06e		       a5 91		      lda	ss_sin+$6
     28  f070		       85 90		      sta	ss_sin+$5
     29  f072		       a5 92		      lda	ss_sin+$7
     30  f074		       85 91		      sta	ss_sin+$6
     31  f076		       a5 93		      lda	ss_sin+$8
     32  f078		       85 92		      sta	ss_sin+$7
     33  f07a		       a5 94		      lda	ss_sin+$9
     34  f07c		       85 93		      sta	ss_sin+$8
     35  f07e		       a5 95		      lda	ss_sin+$a
     36  f080		       85 94		      sta	ss_sin+$9
     37  f082		       a5 96		      lda	ss_sin+$b
     38  f084		       85 95		      sta	ss_sin+$a
     39  f086		       a5 97		      lda	ss_sin+$c
     40  f088		       85 96		      sta	ss_sin+$b
     41  f08a		       a5 98		      lda	ss_sin+$d
     42  f08c		       85 97		      sta	ss_sin+$c
     43  f08e		       a5 99		      lda	ss_sin+$e
     44  f090		       85 98		      sta	ss_sin+$d
     45  f092		       a5 9a		      lda	ss_sin+$f
     46  f094		       85 99		      sta	ss_sin+$e
     47  f096		       a5 9b		      lda	ss_sin+$10
     48  f098		       85 9a		      sta	ss_sin+$f
     49  f09a		       a5 9c		      lda	ss_sin+$11
     50  f09c		       85 9b		      sta	ss_sin+$10
     51  f09e		       a5 9d		      lda	ss_sin+$12
     52  f0a0		       85 9c		      sta	ss_sin+$11
     53  f0a2		       a5 9e		      lda	ss_sin+$13
     54  f0a4		       85 9d		      sta	ss_sin+$12
     55  f0a6		       a5 9f		      lda	ss_sin+$14
     56  f0a8		       85 9e		      sta	ss_sin+$13
     57  f0aa		       a5 a0		      lda	ss_sin+$15
     58  f0ac		       85 9f		      sta	ss_sin+$14
     59  f0ae		       a5 a1		      lda	ss_sin+$16
     60  f0b0		       85 a0		      sta	ss_sin+$15
     61  f0b2		       a5 a2		      lda	ss_sin+$17
     62  f0b4		       85 a1		      sta	ss_sin+$16
     63  f0b6		       a5 a3		      lda	ss_sin+$18
     64  f0b8		       85 a2		      sta	ss_sin+$17
     65  f0ba		       a5 a4		      lda	ss_sin+$19
     66  f0bc		       85 a3		      sta	ss_sin+$18
     67  f0be		       a5 a5		      lda	ss_sin+$1a
     68  f0c0		       85 a4		      sta	ss_sin+$19
     69  f0c2		       a5 a6		      lda	ss_sin+$1b
     70  f0c4		       85 a5		      sta	ss_sin+$1a
     71  f0c6		       a5 a7		      lda	ss_sin+$1c
     72  f0c8		       85 a6		      sta	ss_sin+$1b
     73  f0ca		       a5 a8		      lda	ss_sin+$1d
     74  f0cc		       85 a7		      sta	ss_sin+$1c
     75  f0ce		       a5 a9		      lda	ss_sin+$1e
     76  f0d0		       85 a8		      sta	ss_sin+$1d
     77  f0d2		       a5 aa		      lda	ss_sin+$1f
     78  f0d4		       85 a9		      sta	ss_sin+$1e
     79  f0d6		       a5 ab		      lda	ss_sin+$20
     80  f0d8		       85 aa		      sta	ss_sin+$1f
     81  f0da		       a5 ac		      lda	ss_sin+$21
     82  f0dc		       85 ab		      sta	ss_sin+$20
     83  f0de		       a5 ad		      lda	ss_sin+$22
     84  f0e0		       85 ac		      sta	ss_sin+$21
     85  f0e2		       a5 ae		      lda	ss_sin+$23
     86  f0e4		       85 ad		      sta	ss_sin+$22
     87  f0e6		       a5 af		      lda	ss_sin+$24
     88  f0e8		       85 ae		      sta	ss_sin+$23
     89  f0ea		       a5 b0		      lda	ss_sin+$25
     90  f0ec		       85 af		      sta	ss_sin+$24
     91  f0ee		       a5 b1		      lda	ss_sin+$26
     92  f0f0		       85 b0		      sta	ss_sin+$25
     93  f0f2		       a5 b2		      lda	ss_sin+$27
     94  f0f4		       85 b1		      sta	ss_sin+$26
     95  f0f6
     96  f0f6		       a5 88		      lda	posintab
     97  f0f8		       85 b1		      sta	ss_sin+$26
     98  f0fa		       60		      rts
     99  f0fb
    100  f0fb
    101  f0fb				   fx_kernel
    102  f0fb
    103  f0fb		       a9 02		      lda	#2
    104  f0fd		       85 02		      sta	WSYNC
    105  f0ff		       85 02		      sta	WSYNC
    106  f101		       85 02		      sta	WSYNC
    107  f103		       a9 ff		      lda	#$FF
    108  f105		       85 08		      sta	COLUPF
    109  f107
    110  f107		       a2 1e		      ldx	#30
    111  f109				   WaitForVblankEnd
    112  f109		       85 02		      sta	WSYNC
    113  f10b		       ca		      dex
    114  f10c		       d0 fb		      bne	WaitForVblankEnd
    115  f10e
    116  f10e
    117  f10e		       a0 27		      ldy	#39
    118  f110				   reloadx
    119  f110		       b6 8b		      ldx	ss_sin,y
    120  f112				   ss_DrawPic
    121  f112		       b9 3e f1 	      lda	logo0,Y
    122  f115		       85 0d		      sta	PF0
    123  f117		       b9 66 f1 	      lda	logo1,Y
    124  f11a		       85 0e		      sta	PF1
    125  f11c		       b9 8e f1 	      lda	logo2,Y
    126  f11f		       85 0f		      sta	PF2
    127  f121		       84 08		      sty	COLUPF
    128  f123		       b9 b6 f1 	      lda	logo3,Y
    129  f126		       85 0d		      sta	PF0
    130  f128		       b9 de f1 	      lda	logo4,Y
    131  f12b		       85 0e		      sta	PF1
    132  f12d		       b9 06 f2 	      lda	logo5,Y
    133  f130		       85 0f		      sta	PF2
    134  f132		       85 02		      sta	WSYNC
    135  f134
    136  f134		       ca		      dex
    137  f135		       d0 db		      bne	ss_DrawPic
    138  f137
    139  f137		       88		      dey
    140  f138		       d0 d6		      bne	reloadx
    141  f13a
    142  f13a		       60		      rts
    143  f13b
    144  f13b				   fx_overscan
    145  f13b		       85 02		      sta	WSYNC
    146  f13d		       60		      rts
    147  f13e
------- FILE logo.asm LEVEL 3 PASS 2
      0  f13e					      include	"logo.asm"
      1  f13e				   logo0
      2  f13e		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
      3  f148		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$f0,$00,$10,$10
      4  f152		       10 10 10 f0*	      .byte.b	$10,$10,$10,$f0,$10,$10,$10,$f0,$00,$f0
      5  f15c		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
      6  f166				   logo1
      7  f166		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
      8  f170		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$ff,$00,$07,$04
      9  f17a		       04 04 04 84*	      .byte.b	$04,$04,$04,$84,$04,$04,$04,$f4,$00,$ff
     10  f184		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     11  f18e				   logo2
     12  f18e		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     13  f198		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$ff,$00,$cf,$20
     14  f1a2		       20 20 20 20*	      .byte.b	$20,$20,$20,$20,$20,$20,$20,$20,$00,$ff
     15  f1ac		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     16  f1b6				   logo3
     17  f1b6		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     18  f1c0		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$f0,$00,$f0,$00
     19  f1ca		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$f0
     20  f1d4		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     21  f1de				   logo4
     22  f1de		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     23  f1e8		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$ff,$00,$3e,$81
     24  f1f2		       81 81 81 9e*	      .byte.b	$81,$81,$81,$9e,$a0,$a0,$a0,$9f,$00,$ff
     25  f1fc		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     26  f206				   logo5
     27  f206		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
     28  f210		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$ff,$00,$84,$84
     29  f21a		       84 84 84 fc*	      .byte.b	$84,$84,$84,$fc,$84,$84,$84,$84,$00,$ff
     30  f224		       00 00 00 00*	      .byte.b	$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
------- FILE fx.asm
    149  f22e
    150  f22e		       30	   ss_tblow   .byte.b	<sintab
    151  f22f		       f2	   ss_tbhi    .byte.b	>sintab
    152  f230
    153  f230				   sintab
    154  f230		       01 01 01 02*	      .byte.b	$1,$1,$1,$2,$2,$2,$2,$3,$3,$3
    155  f23a		       04 04 04 05*	      .byte.b	$4,$4,$4,$5,$5,$5,$6,$6,$6,$7
    156  f244		       07 08 07 07*	      .byte.b	$7,$8,$7,$7,$6,$6,$5,$5,$5,$4
    157  f24e		       04 03 03 03*	      .byte.b	$4,$3,$3,$3,$3,$2,$2,$2,$2,$2
    158  f258
 ROM: 3492 bytes left
    159  f258					      echo	"ROM:", ($FFFC - *)d, "bytes left"
------- FILE main.asm
     66  f258
     67  f258
     68  f258							;;;-----------------------------------------------------------------------------
     69  f258							;;; Reset Vector
     70  f258
     71  10000 ????				       SEG	reset
     72  fffc					      ORG	$FFFC
     73  fffc		       00 f0		      DC.W	init
     74  fffe		       00 f0		      DC.W	init
